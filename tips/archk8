https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/

set hostname
add node mapping to /etc/hosts
add local resolv.conf
install containerd runc

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

https://dl.k8s.io/v1.28.2/bin/linux/amd64/kubelet
https://dl.k8s.io/v1.28.2/bin/linux/amd64/kubeadm
https://dl.k8s.io/v1.28.2/bin/linux/amd64/kubectl

get kubeadm, kubelet, kubectl
	cni-plugins, conntrack-tools crictl ethtool iptables-nft-1
	libnetfilter_cthelper libnetfilter_cttimeout-1.0.1-1 nftables

install kubelet from package manager

Get crictl v1.28.0
wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz

kubeadm config images pull
[config/images] Pulled registry.k8s.io/kube-apiserver:v1.28.2
[config/images] Pulled registry.k8s.io/kube-controller-manager:v1.28.2
[config/images] Pulled registry.k8s.io/kube-scheduler:v1.28.2
[config/images] Pulled registry.k8s.io/kube-proxy:v1.28.2
[config/images] Pulled registry.k8s.io/pause:3.9
[config/images] Pulled registry.k8s.io/etcd:3.5.9-0
[config/images] Pulled registry.k8s.io/coredns/coredns:v1.10.1

Control:
kubeadm init --control-plane-endpoint <dns name/ip>

kubeadm join <init generated string>

Port: 10250, 2379, 2380

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join lsk0001:6443 --token 8otp6u.m269yjdf3nb3cm87 \
	--discovery-token-ca-cert-hash sha256:9fa505526fbc9fdc2288ffb68141f979d2bf1b5a09ed7e65a552cd16e5049d5f \
	--control-plane

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join lsk0001:6443 --token 8otp6u.m269yjdf3nb3cm87 \
	--discovery-token-ca-cert-hash sha256:9fa505526fbc9fdc2288ffb68141f979d2bf1b5a09ed7e65a552cd16e5049d5f

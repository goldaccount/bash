http://www.pyeung.com/pages/unix/linux/bashcomparisonoperators.html

alias	Create a command alias.
awk	Search and replace text within a file.
cal	Display a monthly calendar.
chgrp	Change group ownership for a file or directory.
chmod	Change access permissions on a file or directory.
chown	Change ownership for a file or directory.
clear	Clear screen.
cp	Copy a file.
crontab	Schedule a task to be run at a later time.
du	Display a summary of estimated disk usage.
fdisk	Disk partition utility.
find	Search for files.
free	Display memory usage.
grep	Search a file for specific text.
gzip	Compression utility, handles .z files.
history	Display a list of recent commands.
kill	Kill a process.
ln	Create a link to a file.
locate	Find files.
ls	List files.
man	Manual application.
mkdir	Make a directory.
more	Displays the contents of a file by page.
mv	Move a file to a different directory.
passwd	Change password.
ps	Displays running processes.
pwd	Print Working Directory, displays current directory.
quota	Display disk quota information.
rm	Remove a file.
rmdir	Remove a directory.
rpm	Remote Package Manager, program installer.
set	Set shell variables and functions.
shutdown	Shuts down Linux system.
tar	Tape ARchiver, backup utility.
unalias	Remove an alias.
unset	Remove shell variables and functions.
useradd	Add a username.
w	List all users currently logged on, along with their current running process.
whereis	Searches for files within a hard-coded path (use 'find' to search exhaustively).
who	List all users currently logged on.
whoami	Display username

Linux BASH - Control Structures
for loops
	for i in 1 2 3 4 5
do
   {code}
done
	for ((i=0; i<=10; i++)) do
   {code}
done
if-then-else
	if [ $i -eq 2 ]
then
   {code}
else
   {code}
fi
	if [ $i -eq 2 ]
then
   {code}
elif [ $1 -eq 5]
then
   {code}
else
   {code}
fi
while-do
	while [ i -lt 10 ]
do
   {code}
   i++
done
	# Note: "while :" creates an endless loop
while :
do
   {code}
done
until-do
	until [ i -eq 10 ]
do
   {code}
   i++
done
case
	case "$1"
in
   hello)
      echo "Hello to you too."
      ;;
   goodbye)
      echo "See ya later."
      ;;
   *)
      echo "Huh? How rude..."
      ;;
esac

nteger Comparison Operators
Operator	Description	Example
-eq	Is Equal To	if [ $1 -eq 200 ]
-ne	Is Not Equal To	if [ $1 -ne 1 ]
-gt	Is Greater Than	if [ $1 -gt 15 ]
-ge	Is Greater Than Or Equal To	if [ $1 -ge 10 ]
-lt	Is Less Than	if [ $1 -lt 5 ]
-le	Is Less Than Or Equal To	if [ $1 -le 0 ]
==	Is Equal To	if (( $1 == $2 )) [Note: Used within double parentheses]
!=	Is Not Equal To	if (( $1 != $2 ))
<	Is Less Than	if (( $1 < $2 ))
<=	Is Less Than Or Equal To	if (( $1 <= $2 ))
>	Is Greater Than	if (( $1 > $2 ))
>=	Is Greater Than Or Equal To	if (( $1 >= $2 ))

 String Comparison Operators
Operator	Description	Example
= or ==	Is Equal To	if [ "$1" == "$2" ]
!=	Is Not Equal To	if [ "$1" != "$2" ]
>	Is Greater Than (ASCII comparison)	if [ "$1" > "$2" ]
>=	Is Greater Than Or Equal To	if [ "$1" >= "$2" ]
<	Is Less Than	if [ "$1" < "$2" ]
<=	Is Less Than Or Equal To	if [ "$1" <= "$2" ]
-n	Is Not Null	if [ -n "$1" ]
-z	Is Null (Zero Length String)	if [ -z "$1"]


